{"ast":null,"code":"var _jsxFileName = \"/Users/siddharth/VsCode/netflix/netflix/src/Row.js\",\n    _s = $RefreshSig$();\n\n/*import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport './Row.css'\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        }\n        else {\n\n            movieTrailer(movie?.name || \"\")\n                .then((url) => {\n\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch((error) => console.log(error));\n\n        }\n    };\n\n\n    return (\n        <div className=\"row\" >\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div >\n    )\n}\n\nexport default Row*/\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // A snippet of code which runs based on a specific condition / variables\n\n  useEffect(() => {\n    //if [], run once when the row loads , dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //https://developer.google.com/youtube/player_parameters \n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        //https://www.youtube.com/watch?v=XtMThy8QkqU\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/siddharth/VsCode/netflix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["/*import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport './Row.css'\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        }\n        else {\n\n            movieTrailer(movie?.name || \"\")\n                .then((url) => {\n\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch((error) => console.log(error));\n\n        }\n    };\n\n\n    return (\n        <div className=\"row\" >\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div >\n    )\n}\n\nexport default Row*/\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    // A snippet of code which runs based on a specific condition / variables\n    useEffect(() => {\n        //if [], run once when the row loads , dont run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n\n\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n\n            //https://developer.google.com/youtube/player_parameters \n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n                .then((url) => {\n                    //https://www.youtube.com/watch?v=XtMThy8QkqU\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch(error => console.log(error));\n        }\n\n    }\n\n\n\n\n    return (\n        <div className=\"row\">\n            <h2> {title} </h2>\n\n            <div className=\"row_posters\">\n\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n                        alt={movie.name}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\nexport default Row; \n"]},"metadata":{},"sourceType":"module"}