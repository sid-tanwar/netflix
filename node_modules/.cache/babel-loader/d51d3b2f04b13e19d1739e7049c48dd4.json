{"ast":null,"code":"var _jsxFileName = \"/Users/siddharth/VsCode/netflix/netflix/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        urlParams.get('v');\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/siddharth/VsCode/netflix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACZ,GATQ,EASN,CAACN,QAAD,CATM,CAAT;AAWA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIb,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAGK;AAEDT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACKC,IADL,CACUC,GAAG,IAAI;AAET,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAH,QAAAA,SAAS,CAACb,GAAV,CAAc,GAAd;AAEH,OANL,EAMOiB,KANP,CAMaC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANtB;AAQH;AACJ,GAfD;;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK3B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKG,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACb;AAEI,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF9B;AAGI,QAAA,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAH7D;AAII,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACa,WAAT,GAAuBb,KAAK,CAACc,aAAc,EAJ5E;AAI+E,QAAA,GAAG,EAAEd,KAAK,CAACC;AAJ1F,SACSD,KAAK,CAACe,EADf;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EAWK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAXnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAxDQb,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport './Row.css'\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        }\n        else {\n\n            movieTrailer(movie?.name || \"\")\n                .then(url => {\n\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    urlParams.get('v');\n\n                }).catch(error => console.log(error));\n\n        }\n    }\n\n\n    return (\n        <div className=\"row\" >\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div >\n    )\n}\n\nexport default Row"]},"metadata":{},"sourceType":"module"}